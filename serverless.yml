service: minifarm-web

plugins:
  - serverless-apigw-binary
  # comment out this line if you don't have a registered domain name
  - serverless-domain-manager
  - serverless-offline

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'local'}
  region: us-east-2
  memorySize: ${self:custom.config.provider.memory}
  timeout: 6
  environment:
    stage: ${self:provider.stage}

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can add packaging information here
package:
  individually: true
  excludeDevDependencies: true
  exclude:
    - ./**
    - '!node_modules/**'
  include:
    - binaryMimeTypes.js
    - index.js
    - next.config.js
    - package-lock.json
    - package.json
    - server.js
    - static/**
    - .next/serverless/**
    - .next/static/**

custom:
  config: ${file(./config/${self:provider.stage}.yml)}
  apigwBinary:
    types:
      - '*/*'
  customDomain:
    domainName: ${self:custom.config.domain}
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
    #endpointType: 'regional'
    # if the ACM certificate is created in a region except for `'us-east-1'` you need `endpointType: 'regional'`

functions:
  app:
    handler: index.handler
    events:
      - http: ANY /
      - http: ANY /{proxy+}
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
